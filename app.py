import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel, Listbox, simpledialog
import requests
import subprocess
from tkinter import font as tkfont

API_UPLOAD = "http://localhost:5000/upload"
API_LIST = "http://localhost:5000/images"
API_DELETE = "http://localhost:5000/delete"


def upload_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg *.jpeg *.png")])
    if file_path:
        name = simpledialog.askstring("ƒê·∫∑t t√™n ·∫£nh", "Nh·∫≠p t√™n cho ·∫£nh n√†y:")
        if not name:
            messagebox.showwarning("Thi·∫øu t√™n", "B·∫°n ch∆∞a nh·∫≠p t√™n ·∫£nh.")
            return
        with open(file_path, 'rb') as f:
            files = {'image': f}
            data = {'name': name}
            try:
                response = requests.post(API_UPLOAD, files=files, data=data)
                if response.status_code == 200:
                    messagebox.showinfo("Th√†nh c√¥ng", "·∫¢nh ƒë√£ ƒë∆∞·ª£c upload l√™n server.")
                    status_var.set("‚úÖ ·∫¢nh ƒë√£ upload th√†nh c√¥ng!")
                else:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ upload ·∫£nh. M√£ l·ªói: {response.status_code}")
                    status_var.set("‚ùå Upload th·∫•t b·∫°i!")
            except Exception as e:
                messagebox.showerror("L·ªói k·∫øt n·ªëi", str(e))
                status_var.set("‚ùå L·ªói k·∫øt n·ªëi khi upload ·∫£nh.")

def run_face_recognition():
    try:
        subprocess.run(["python", "face_detection.py"])
        status_var.set("üîç ƒê√£ ch·∫°y nh·∫≠n di·ªán khu√¥n m·∫∑t.")
    except Exception as e:
        messagebox.showerror("L·ªói khi ch·∫°y nh·∫≠n di·ªán", str(e))
        status_var.set("‚ùå L·ªói khi ch·∫°y nh·∫≠n di·ªán.")

def load_images_to_listbox(listbox):
    try:
        response = requests.get(API_LIST)
        if response.status_code == 200:
            images = response.json()
            listbox.delete(0, tk.END)
            for img in images:
                listbox.insert(tk.END, img)
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·∫£nh.")
    except Exception as e:
        messagebox.showerror("L·ªói k·∫øt n·ªëi", str(e))

def delete_image(listbox):
    try:
        selection = listbox.curselection()
        if not selection:
            messagebox.showwarning("Ch∆∞a ch·ªçn ·∫£nh", "Vui l√≤ng ch·ªçn m·ªôt ·∫£nh ƒë·ªÉ xo√°.")
            return
        selected_image = listbox.get(selection[0])
        parts = selected_image.split(':')
        if len(parts) < 2:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID ·∫£nh.")
            return
        image_id = parts[1].split(',')[0].strip().strip("'")
        response = requests.delete(f"{API_DELETE}/{image_id}")
        if response.status_code == 200:
            messagebox.showinfo("Th√†nh c√¥ng", "·∫¢nh ƒë√£ ƒë∆∞·ª£c xo√° kh·ªèi server.")
            listbox.delete(selection[0])
            status_var.set("üóëÔ∏è ·∫¢nh ƒë√£ ƒë∆∞·ª£c xo√°.")
        else:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xo√° ·∫£nh. M√£ l·ªói: {response.status_code}")
            status_var.set("‚ùå L·ªói khi xo√° ·∫£nh.")
    except requests.exceptions.RequestException as req_err:
        messagebox.showerror("L·ªói k·∫øt n·ªëi", f"L·ªói khi g·ªçi API: {str(req_err)}")
    except Exception as e:
        messagebox.showerror("L·ªói kh√¥ng x√°c ƒë·ªãnh", str(e))

def show_image_list():
    try:
        response = requests.get(API_LIST)
        if response.status_code == 200:
            win = Toplevel(root)
            win.title("üìÇ Danh s√°ch ·∫£nh")
            win.geometry("400x400")
            win.configure(bg="#fdfdfd")

            label = tk.Label(win, text="üñºÔ∏è Danh s√°ch ·∫£nh ƒë√£ l∆∞u", font=("Helvetica", 14, "bold"), bg="#fdfdfd")
            label.pack(pady=10)

            listbox = Listbox(win)
            listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

            images = response.json()
            for img in images:
                listbox.insert(tk.END, img)

            btn_frame = tk.Frame(win, bg="#fdfdfd")
            btn_frame.pack(pady=10)

            btn_delete = tk.Button(btn_frame, text="üóëÔ∏è Xo√° ·∫£nh", command=lambda: delete_image(listbox), width=15)
            btn_delete.grid(row=0, column=0, padx=5)

            btn_reset = tk.Button(btn_frame, text="üîÑ T·∫£i l·∫°i", command=lambda: load_images_to_listbox(listbox), width=15)
            btn_reset.grid(row=0, column=1, padx=5)
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·∫£nh.")
    except Exception as e:
        messagebox.showerror("L·ªói k·∫øt n·ªëi", str(e))


# === GUI CH√çNH ===
root = tk.Tk()
root.title("üß† Face Recognition App")
root.geometry("500x350")
root.configure(bg="#f5faff")

title_font = tkfont.Font(family="Helvetica", size=16, weight="bold")

# Ti√™u ƒë·ªÅ
title_label = tk.Label(root, text="üß† ·ª®ng d·ª•ng Nh·∫≠n di·ªán Khu√¥n m·∫∑t", font=title_font, bg="#f5faff", fg="#2b2b2b")
title_label.pack(pady=20)

# N√∫t trong m·ªôt khung ri√™ng
btn_frame = tk.Frame(root, bg="#f5faff")
btn_frame.pack()

def create_hover_button(text, command, bg, row):
    btn = tk.Button(btn_frame, text=text, command=command, height=2, bg=bg, relief=tk.RAISED)
    btn.grid(row=row, column=0, pady=5, sticky="ew", padx=20)  # sticky="ew" gi√∫p n√∫t m·ªü r·ªông ngang
    # Hi·ªáu ·ª©ng hover
    btn.bind("<Enter>", lambda e: btn.config(bg="#d9f1ff"))
    btn.bind("<Leave>", lambda e: btn.config(bg=bg))
    return btn


create_hover_button("üì§ Upload ·∫£nh", upload_image, "#e6f7ff", 0)
create_hover_button("üîç Nh·∫≠n di·ªán khu√¥n m·∫∑t", run_face_recognition, "#e6ffe6", 1)
create_hover_button("üñºÔ∏è Danh s√°ch ·∫£nh trong CSDL", show_image_list, "#fff0e6", 2)

# Thanh tr·∫°ng th√°i
status_var = tk.StringVar()
status_var.set("‚ö° S·∫µn s√†ng")

status_bar = tk.Label(root, textvariable=status_var, bd=1, relief=tk.SUNKEN, anchor=tk.W, bg="#e6e6e6")
status_bar.pack(side=tk.BOTTOM, fill=tk.X)

root.mainloop()
